[
    {
        "state": {
            "name": "subscribing",
            "type": "activity state",
            "expression": [
                "subscriptionState.SUBSCRIBING"
            ],
            "entry": [
                {
                    "name": "is it receiving subscribers",
                    "type": "named event",
                    "expression": "receivingSubscribers(liquidityProviderAddress)"
                },
                {
                    "name": "check pair address",
                    "type": "named event",
                    "expression": "isUniswapV2Pair(address uniswapPairAddress)"
                },
                {
                    "name": "check if it is already subscribed",
                    "type": "named event",
                    "expression": "Subscribers[uniswapPairAddress][liquidityProviderAddress]==false"
                },
                {
                    "name": "check if balance sent can cover reaactive network cost",
                    "type": "named event",
                    "expression": "msg.value > getReactiveCost()"
                }
            ],
            "input": [
                {
                    "name": "request subscription",
                    "type": "named event",
                    "expression": "subscription.requestSubscribe(UniswapPairAddress, liquidityProviderAddress, MaxsubscriptionTime)"
                }
            ],
            "exit": [
                {
                    "name": "no subscribers to pair",
                    "type": "condititon-changed event",
                    "expression": "subscribersCount[_uniswapPairAddress] == 0"
                }
            ]
        },
        "Transitions": [
            {
                "name": "transfer deployment cost",
                "type": "condition-changed event",
                "expression": [
                    "safeTransfer(from: subscription, to: supplyProcessor, amount: msg.value-gasCost-reactiveCost)",
                ],
                "guards": [
                    {
                        "name": "balance covers transaction pool deployement cost",
                        "expresion": "msg.value > gasCost + reactiveCost"
                    },
                    {
                        "name": "no subscribers to pair",
                        "expression": "subscribersCount[_uniswapPairAddress] == 0"
                    }
                ],
                "output/response": [
                    {
                        "name": "deploy kappa pool",
                        "type": "named event",
                        "expression": "deployKappaPool(uniswapPairAddress)"
                    }
                ],
                "nextState": {
                    "name": "deploying kappa pool",
                    "type": "activity state",
                    "expression": [
                        "kappaPool.INITIALIZING"
                    ],
                    "entry": [
                        {
                            "name": "is first subscriber",
                            "type": "named event",
                            "expression": "PoolDeploymentLock(_uniswapPairAddress)"
                        },
                        {
                            "name": "get reactive cost",
                            "type": "named event",
                            "expression": "getReactiveCost(_uniswapPairAddress, amount)"
                        }
                    ],
                    "input": [
                        {
                            "name": "deploy kappa pool",
                            "type": "named event",
                            "expression": "deployKappaPool(uniswapPairAddress)"
                        }
                    ],
                    "exit": [
                        {
                            "name": "get data needed",
                            "type": "named event",
                            "expression": "getReactiveNetworkSubData()->(chainId, uniswapPairAddress, amountToPayREACT)"
                        }
                    ]
                }
            },
            {
                "name": "Error subscribing liquidity provider",
                "type": "named event",
                "expression": [
                    "subscriptionState.FAILED"
                ],
                "guards": [
                    {
                        "name": "Not valid Uniswap Address",
                        "expresion": "isUniswapPair(_uniswapPairAddress)==false"
                    },
                    {
                        "name": "Liquidity provider already subscribed to UniswapV2Pair",
                        "expression": "Subscribers[uniswapPairAddress][liquidityProviderAddress]==false"
                    },
                    {
                        "name": "Funding failed",
                        "expression": "msg.value < getReactiveCost() + gasCost"
                    }
                ],
                "output/response": [
                    {
                        "name": "set to ready to receive subscribers",
                        "type": "condition-changed event",
                        "expression": [
                            "setToReadyToReceiveSubscribers()"
                        ]
                    },
                    {
                        "name": "subscription Failed",
                        "type": "named event",
                        "expression": [
                            "NotValidUniswapV2Pair()",
                            "AlreadySubscribed()",
                            "FundingFailed()"
                        ]
                    }
                ],
                "nextState": {
                    "name": "ready to receive subscribers",
                    "type": "activity state",
                    "expression": [
                        "subscriptionState.IDLE"
                    ],
                    "entry": [
                        {
                            "name": "",
                            "type": "",
                            "expression": [
                                ""
                            ]
                        }
                    ],
                    "input": [
                        {
                            "name": "set to ready to receive subscribers",
                            "type": "condition-changed event",
                            "expression": [
                                "setToReadyToReceiveSubscribers()"
                            ]
                        }
                    ],
                    "exit": [
                        {
                            "name": "",
                            "type": "",
                            "expression": []
                        }
                    ]
                }
            }
        ]
    }
]