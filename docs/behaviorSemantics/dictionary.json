[
    {
        "Subject Domain": "Liquidity Management",
        "Predicates": [
            {
                "name": "Liquidity Provider",
                "Type": "Entity-type name",
                "Description": "A liquidity provider is an account uniquely identified by its address that subscribes to Kappa Optimal Pools."
            },
            {
                "Name": "Subscription",
                "Type": "Entity-type name",
                "Description": "A subscription is a contract between a liquidity provider and the Kappa protocol, in which the liquidity provider provides liquidity to the protocol, and the protocol, in turn, consents to manage the liquidity provider's inventories. Additionally, the Kappa protocol enables subscription management for liquidity providers. A subscription is instantiated by a UniswapV2Pair address and a liquidity provider address."
            },
            {
                "Name": "Kappa Optimal Pool",
                "Type": "Entity-type name",
                "Description": "An optimal pool is a UniswapV2Pair with automatic and dynamic liquidity provision managed by the Kappa reactive control system protocol, determined by trading function curvature shocks triggered by trading volume signals."
            },
            {
                "Name": "KappaOptimalPool.OPEN",
                "Type": "State Predicate name",
                "Description": "A KappaOptimalPool is open when it has at least one liquidity provider subscribed with non-zero inventories."
            },
            {
                "Name": "KappaOptimalPool.SUBSCRIBED",
                "Type": "State Predicate name",
                "Description": "A KappaOptimalPool is subscribed if it has at least one liquidity provider subscribed with non-zero inventories."
            },
            {
                "Name": "subscribed(KappaOptimalPool, LiquidityProvider)",
                "Type": "Event name",
                "Description": "An event triggered by a liquidity provider to subscribe to a specific pool. A subscribed event is uniquely identified by the occurrence date, the liquidity provider's address, and the optimal pool being subscribed to."
            },
            {
                "Name": "deposited(optimalPoolAddress, liquidityProviderAddress, amount)",
                "Type": "Event name",
                "Description": "An event triggered by a liquidity provider to deposit funds to an optimal pool. A deposited event is uniquely identified by the occurrence date, the liquidity provider's address, and the optimal pool being subscribed to."
            },
            {
                "Name": "withdrawn(optimalPoolAddress, liquidityProviderAddress, amount)",
                "Type": "Event name",
                "Description": "An event triggered by a liquidity provider to withdraw funds from an optimal pool. A withdrawn event is uniquely identified by the occurrence date, the liquidity provider's address, and the optimal pool being subscribed to."
            }
        ]
    },
    {
        "Subject Domain": "Equilibrium Management",
        "Predicates": [
            {
                "Name": "Subscription",
                "Type": "Entity-type name",
                "Description": "A subscription is a contract between a liquidity provider and the Kappa protocol, in which the liquidity provider provides liquidity to the protocol, and the protocol, in turn, consents to manage the liquidity provider's inventories. Additionally, the Kappa protocol enables subscription management for liquidity providers. A subscription is instantiated by a UniswapV2Pair address and a liquidity provider address."
            },
            {
                "Name": "Open KappaOptimalPool",
                "Type": "Entity-type name",
                "Description": "An Open KappaOptimalPool is a KappaOptimalPool whose state is set to KappaOptimalPool.OPEN."
            },
            {
                "Name": "Closed KappaOptimalPool",
                "Type": "Entity-type name",
                "Description": "A closed KappaOptimalPool is a KappaOptimalPool whose state is not KappaOptimalPool.OPEN. This entity can only be instantitiated by the close market function in the open kappa optimal pool."
            },
            {
                "Name": "Supply Processor",
                "Type": "Entity-type name",
                "Description": "A supply processor is a program that processes the inventories of subscribed liquidity providers deposited across open KappaOptimal pools."
            },
            {
                "Name": "Shortaged KappaOptimalPool",
                "Type": "Entity-type name",
                "Description": "A Shortaged KappaOptimalPool is a KappaOptimalPool whose state is set to KappaOptimalPool.SHORTAGED."
            },
            {
                "Name": "Supply Surplus Kappa Optimal Pool",
                "Type": "Entity-type name",
                "Description": "A Supply Surplus KappaOptimalPool is a KappaOptimalPool whose state is set to KappaOptimalPool.SUPPLY_SURPLUS"
            },
            {
                "Name": "Volume Router",
                "Type": "Entity-type name",
                "Description": "A volume router is a program that routes noise trading volume data received from the UniswapV2Pair and processed consider the external market data of that market"
            },
            {
                "Name": "Noise Volume",
                "Type": "Entity-type name",
                "Description": "A Noise Volume is a program and data storage system that stores noise trading volume received from the Volume Router and triggers market adjustments to open KappaOptimalPools."
            },
            {
                "Name": "AutoUnsubscribtionSignaling(closedKappaOptimalPool, Subscription)",
                "Type": "Relationship name",
                "Description": "An injective relationship is initiated by a closed kappa optimal pool that maps to its corresponding subscription. It signals the subscription entity to unsubscribe automatically from the pool."
            },
            {
                "Name": "Instantiates(openKappaOptimalPool, closedKappaOptimalPool)",
                "Type": "Relationship name",
                "Description": "An injective relationship is initiated by an open kappa optimal pool and the closed market interface to initlialize it's corresponding closedKappaOptimalPool by changing it's state to KappaOptimalPool.CLOSED."
            },
            {
                "Name": "routesMarketData(subscription, volumeRouter)",
                "Type": "Relationship name",
                "Description": "One subscription routes swap events data from the UniswapV2Market and external price and slippage costs from the corresponding external market to the volume router."
            },
            {
                "Name": "routesVolumeData(volumeRouter, noiseVolume)",
                "Type": "Relationship name",
                "Description": "A volume router routes filtered noise trading volume data from the UniswapV2Market to the noise volume storage."
            },
            {
                "Name": "TriggersMarketAdjustment(noiseVolume, openKappaOptimalPool)",
                "Type": "Relationship name",
                "Description": "One noise volume program triggers supply adjustment and/or market closure based upon detected curvature shifts to the corrresponfding open kappa optimal pool."
            },
            {
                "Name": "OpenKappaOptimalPool.SHORTAGED",
                "Type": "State Predicate name",
                "Description": ""
            },
            {
                "Name": "OpenKappaOptimalPool.SUPPLY_SURPLUS",
                "Type": "State Predicate name",
                "Description": ""
            },
            {
                "Name": "ClosedKappaOptimalPool.INITIALIZED",
                "Type": "State Predicate name",
                "Description": ""
            },
            {
                "Name": "OpenKappaOptimalPool.SHORTAGED",
                "Type": "State Predicate name",
                "Description": ""
            },
            {
                "Name": "OpenKappaOptimalPool.curvature",
                "Type": "Attribute name",
                "Description": ""
            },
            {
                "Name": "Subscription.registry",
                "Type": "Attribute name",
                "Description": ""
            }
        ]
    }
]